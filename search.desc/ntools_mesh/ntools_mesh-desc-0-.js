searchState.loadedDescShard("ntools_mesh", 0, "Mesh tally tools and file parsing\nValues within a tolerance of a boundary return an average …\nMethod variants for dealing with a Point on boundaries\nColumn data including voxel volume\nColumn data (MCNP default)\nCell-under-Voxel column data\nCylindrical (cyl, rzt) mesh type\nPoint (i, j, k) interpreted as cylindrical (r, z, t)\nEmpty collection: i.e. vector, array, slice, etc… of …\nThe error type for <code>ntools-mesh</code>\nClearer parser errors with better context\nUnable to create a <code>target</code> type from <code>input</code>\nMeshtal output formats, e.g. <code>COL</code>, <code>JK</code>, <code>CUV</code>…\nMesh geometry types, i.e. <code>Rectangular</code>, <code>Cylindrical</code>\nEnergy/Time groups are either <code>Total</code> or an upper bin edge\nHDF5 mesh in a runtape\n2D matrix of I (col) and J (row) data, grouped by K\n2D matrix of I (col) and K (row) data, grouped by J\nPoint (i, j, k) interpreted as indicies\nIndex outside an acceptable index range\nErrors from std::io\n2D matrix of J (col) and K (row) data, grouped by I\nValues exactly on a boundary return the lower voxel\nCommon data structure representing a mesh tally\nSpecial case for unknown format or meshes with no output\nRaw nom crate errors\nErrors from ntools utilities\nComplete collection of MCNP particle variants\nGeneric representation of a point in the mesh geometry\nVariants for the type of Point coordinates\nUnable to find a point within the mesh\nCartesian (rec, xyz) mesh type\nPoint (i, j, k) interpreted as cartesian (x, y, z)\nThe tally &lt;mesh_id&gt; could not be found in a file\nThe ‘Total’ bin group\nCollection length does not match the expectation\nThe number of voxels in a Mesh does not match the …\nUnable to detect the mesh type from the contect of a file\nValues exactly on a boundary return the higher voxel\nThe upper edge of a bin\nRepresentation of a single voxel in the mesh\nConvenience structure for collecting voxel coordiante …\nExtension trait for slices of voxels\nErrors from the vtkio crate\nReturns the absolute error for the voxel\nTurn point into an array\nFind the averege (<code>value</code>, <code>error</code>) in the mesh\nFind the average (<code>value</code>, <code>error</code>) in a Voxel collection\nAXS card, [0.0, 0.0, 1.0] for MCNP default\nFind the global cell index from (e,t,i,j,k) indicies\nConvert voxel index to a cell index\nCollect (<code>value</code>, <code>error</code>) pairs from a Voxel collection\nEnergy Group\nNumber of energy bins, EXCLUDING ‘total’ group\nEnergy bins\nEnergy group (MeV)\nReturns slice of <code>emesh</code> for lower energy bin edges\nReturns slice of <code>emesh</code> for upper energy bin edges\nGet the energy Group for the energy index <code>e_idx</code>\nFor a given energy, find what group the results are under\nReturns a collection of all energy groups, including total\nFor a given energy group, find the corresponding <code>emesh</code> bin …\nFor a given energy, find the corresponding <code>emesh</code> bin index\nRelative error on result\nFind the (e,t,i,j,k) indicies for a given cell index\nFind the (e,t,i,j,k) indicies for a given voxel index\nFind the result at a Point\nFind all relevant voxels corresponding to a Point\nFind the results for a list of Points\nOutput format from which this mesh was derived\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from any valid particle id\nCreate a Point from (i,j,k) indexing\nCreate a Point from an array of <code>[i,j,k]</code> indices\nCreate a Point from (r,z,t) cylindrical coordinates\nCreate a Point from an array of <code>[r,z,t]</code> cylindrical …\nConvert from any valid designator, name, or meshtal output …\nCreate a Point from (x,y,z) cartesian coordinates\nCreate a Point from an array of <code>[x,y,z]</code> cartesian …\nMesh geometry type, usually rectangular for MCNP default\nCoordinate system based name i.e. ‘XYZ’, ‘RZT’\ni coordinate\ni coordinate at the voxel centre\nAn alternative to using <code>Neutron as u8</code>\nMesh tally number e.g fmesh104 =&gt; id = 104\nNumber of voxels in i\ni mesh boundaries\nGlobal voxel index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the Group is the <code>Total</code> variant\nCheck if the Group is the <code>Value</code> variant\nj coordinate\nj coordinate at the voxel centre\nNumber of voxels in j\nj mesh boundaries\nk coordinate\nk coordinate at the voxel centre\nCoordiante system\nNumber of voxels in j\nk mesh boundaries\nFull name i.e. ‘Rectangular’, ‘Cylindrical’\nFind the maximum (<code>value</code>, <code>error</code>) in the mesh\nFind the maximum (<code>value</code>, <code>error</code>) in a Voxel collection\nFind the maximum Voxel\nConvert a mesh tally to vtk using default options\nFind the minimum (<code>value</code>, <code>error</code>) in the mesh\nFind the minimum (<code>value</code>, <code>error</code>) in a Voxel collection\nFind the minimum Voxel\nReturns the number of energy bins\nReturns the number of time bins\nReturns the number of voxels\nCalculate how many voxels there should be\nExpected number of voxels per group set\nInitialise new mesh with known id\nCreate a new Point with the default values\nORIGIN card, [0.0, 0.0, 0.0] for MCNP default\nName of the particle type\nRaise the voxel to some power\nRead all meshes in a meshtal file\nRead only the specified mesh from a meshtal file\nRead only the specified mesh, with progress bar\nParsers and logic for reading meshtal files\nReturns the relative error for the voxel\nTallied voxel result\nMultiply all voxel results by a constant factor\nShortened name i.e. ‘Rec’, ‘Cyl’\nTime Group\nTime group (shakes)\nReturns slice of <code>emesh</code> for lower time bin edges\nReturns slice of <code>tmesh</code> for upper time bin edges\nGet the time Group for the time index <code>t_idx</code>\nFor a given time, find what group the results are under\nReturns a collection of all time groups, including total\nFor a given time group, find the corresponding <code>tmesh</code> bin …\nFor a given time, find the corresponding <code>tmesh</code> bin index\nNumber of time bins, EXCLUDING ‘total’ group\nTime bins [shakes]\nTranslate all coordinates by (x, y, z)\nFind the average (<code>value</code>, <code>error</code>) in the mesh\nFind the maximum (<code>value</code>, <code>error</code>) in the mesh\nFind the minimum (<code>value</code>, <code>error</code>) in the mesh\nVEC card, [1.0, 0.0, 0.0] for MCNP default\nGet a full set of coordinates for a voxel\nCollect (<code>value</code>, <code>error</code>) pairs for all voxels in the mesh\nConvert a cell index to a voxel index\nFind the global voxel index from (e,t,i,j,k) indicies\nList of every <code>Voxel</code> in the mesh\nSlice the full list of mesh Voxels by energy/time index\nSlice the full list of mesh Voxels by both energy/time …\nConversion to Visual Toolkit (VTK) formats\nWrite any vtk to file\nAdditional information for CuV data parsing\nA generalised reader for legacy meshtal files of any type\nVoid cells are excluded in output data\nVoid cells are included in output data\nExplicit states for the CuV ‘Voidoff=’ card\ncell number\nmaterial density\nDo not print the tqdm progress indicators\nEneergy group\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ni coordinate at centre of voxel\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nj coordinate at centre of voxel\nk coordinate at centre of voxel\nmaterial number\nJust calls Default::default(), nothing special to be …\nParses all mesh data from a mcnp meshtal file\nRead all meshes in a meshtal file\nRead only the specified mesh from a meshtal file\nRead only the specified mesh, with progress bar\nSetter for specifying which mesh to target\nTime group\ncell volume\nASCII text file\nASCII headers with binary data\nConvert mesh tallies to vtk formats for plotting\nBuilder implementation for MeshToVtk configuration\nVertex for use in cylindrical and unstructured mesh types\nEnum of VTK output formats\nExtensible Markup Language (xml)\nturn vertex into a vector, rounding to 5 decimal places …\nBuild the MeshToVtk type\nGet an instance of the MeshToVtkBuilder\nSet the byte ordering\nByte ordering as big or little endian\nSet the compression method for xml file formats\ncompression method for xml file formats\nConvert a Mesh to vtkio::Vtk object\nTarget energy group(s)\nTarget energy group(s)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude errors mesh in output files\nInclude errors mesh in output files\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a mesh tally to vtk using default options\nCreate a new instance of the builder with default …\nStart with the default configuration\nCylindrical mesh resolution\nCylindrical mesh resolution\nForce rounding of f64 to 5 decimal places\nRotate a point about the origin\nTarget time group(s)\nTarget energy group(s)\nPass along simple translations by (x,y,z) cartesian …\nWrite any vtk to file")