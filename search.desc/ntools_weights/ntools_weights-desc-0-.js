searchState.loadedDescShard("ntools_weights", 0, "Tools for MCNP weight window operations\nThe error type for the <code>ntools-weights</code> crate\nMesh-based global weight window data for WWINP/WWOUT/WWONE\nBlock 1 formatted String of common data for all combined …\nOnly the formatted header String\nBlock 2 formatted String containing all the coarse mesh …\nBlock 3 formatted String of weight windows for each voxel …\nUpper energy bounds for each particle type\nFind the (e,t,i,j,k) indicies for a given cell index\nFile type, manual states unused, so always 1.\nGenerate file content as a string (not for large files)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime-dependent windows flag, 1=no 2=yes.\nTotal number of coarse mesh points in i\nTotal number of coarse mesh points in j\nTotal number of coarse mesh points in k\nNumber of energy bins for each particle type\nTotal number of fine mesh points in i\nTotal number of fine mesh points in j\nTotal number of fine mesh points in k\nNumber of particle types\nCalculate number of non-zero weights\nNumber of ‘words’ to describe mesh. rec=10, cyl/sph=16\nNumber of time bins for each particle type\nMesh type 1=rec, 2=cyl, 3=sph\nRetain particle type for use in multi-particle sets\nProblem description, 19-char string, can be blank.\nList of (qx(i), px(i), sx(i)) tuples for i=1,ncx\nList of (qy(i), py(i), sy(i)) tuples for i=1,ncy\nList of (qz(i), pz(i), sz(i)) tuples for i=1,ncz\nMultiply all weights by a constant factor\nUpper time bounds for each particle type if nt(i)&gt;1\nConvert from a cell index to a voxel index\nConvert indexed bins to a voxel index\nConversion to Visual Toolkit (VTK) formats\nFlattened vector of lower weights for each voxel, for each …\nWrite the weight window to the standard fromatted UTF-8 …\nCombine multiple weight window sets into a single wwout …\nConvenience function for writing a WeightWindow into a …\nOrigin i coordinate\nAxis i coordinate\nVec i coordinate\nOrigin j coordinate\nAxis j coordinate\nVec j coordinate\nOrigin k coordinate\nAxis k coordinate\nVec k coordinate\nASCII text file\nASCII headers with binary data\nVertex for use in cylindrical and unstructured mesh types\nEnum of VTK output formats\nConvert weight window sets to vtk formats for plotting\nBuilder implementation for WeightsToVtk configuration\nExtensible Markup Language (xml)\nturn vertex into a vector, rounding to 5 decimal places …\nBuild the WeightsToVtk type\nGet an instance of the WeightsToVtkBuilder\nSet the byte ordering\nByte ordering as big or little endian\nSet the compression method for xml file formats\ncompression method for xml file formats\nConvert a WeightWindow to Vtk object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of the builder with default …\nStart with the default configuration\nCylindrical mesh resolution\nCylindrical mesh resolution\nForce rounding of f64 to 5 decimal places\nRotate a point about the origin\nPass along simple translations by (x,y,z) cartesian …\nConvert a set of weight windows to vtk using default …\nWrite any vtk to file")